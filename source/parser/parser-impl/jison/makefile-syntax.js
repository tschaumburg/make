/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var makefileSyntax = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,12],$V1=[2,9],$V2=[1,5],$V3=[1,6],$V4=[1,9],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[30,35],$Vg=[2,30],$Vh=[5,12,18,19],$Vi=[1,39],$Vj=[5,12,19];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"makefile":3,"statements":4,"EOF2":5,"statement":6,"rulestatement":7,"RECIPE_LINE":8,"INCLUDE":9,"variable_definition":10,"emptyline":11,"EOL":12,"TARGETS":13,"COLON_TARGETS":14,"colon_targets_optional":15,"pipe_targets_optional":16,"inline_recipe_optional":17,"PIPE_TARGETS":18,"INLINE_RECIPE":19,"inline_variable_definition":20,"multiline_variable_definition":21,"VARIABLE_SET_SIMPLE":22,"VARIABLE_VALUE":23,"VARIABLE_SET_RECURSIVE":24,"VARIABLE_SET_APPEND":25,"VARIABLE_SET_CONDITIONAL":26,"VARIABLE_SET_SHELL":27,"MACRO_SIMPLE":28,"multiline_values":29,"MACRO_END":30,"MACRO_RECURSIVE":31,"MACRO_APPEND":32,"MACRO_CONDITIONAL":33,"MACRO_SHELL":34,"MACRO_VALUE":35,"optional_recipes":36,"recipes":37,"test":38,"dotest":39,"evt":40,"RULELINE":41,"RULE_START":42,"EXPLICIT_RULE":43,"IMPLICIT_RULE":44,"TARGETPATTERNS":45,"PREREQUISITES":46,"PREREQPATTERNS":47,"ORDERONLIES":48,"VARSTART":49,"PIPE":50,"COLON":51,"SPC":52,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF2",8:"RECIPE_LINE",9:"INCLUDE",12:"EOL",13:"TARGETS",14:"COLON_TARGETS",18:"PIPE_TARGETS",19:"INLINE_RECIPE",22:"VARIABLE_SET_SIMPLE",23:"VARIABLE_VALUE",24:"VARIABLE_SET_RECURSIVE",25:"VARIABLE_SET_APPEND",26:"VARIABLE_SET_CONDITIONAL",27:"VARIABLE_SET_SHELL",28:"MACRO_SIMPLE",30:"MACRO_END",31:"MACRO_RECURSIVE",32:"MACRO_APPEND",33:"MACRO_CONDITIONAL",34:"MACRO_SHELL",35:"MACRO_VALUE",41:"RULELINE",42:"RULE_START",43:"EXPLICIT_RULE",44:"IMPLICIT_RULE",45:"TARGETPATTERNS",46:"PREREQUISITES",47:"PREREQPATTERNS",48:"ORDERONLIES",49:"VARSTART",50:"PIPE",51:"COLON",52:"SPC"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[4,3],[4,1],[11,0],[7,5],[15,1],[15,0],[16,1],[16,0],[17,1],[17,0],[10,1],[10,1],[20,2],[20,2],[20,2],[20,2],[20,2],[21,3],[21,3],[21,3],[21,3],[21,3],[29,2],[29,0],[36,1],[36,0],[37,2],[37,1],[38,1],[39,2],[39,0],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        parseEvents.end(yy);
      
break;
case 2:
 log.info("sendStartRule call"); 
break;
case 3:
 log.info("sendRecipeLine call"); parseEvents.sendRecipeLine(yy, _$[$0], $$[$0]); log.info("sendRecipeLine return"); 
break;
case 4:
 log.info("sendInclude call"); parseEvents.sendInclude(yy, _$[$0], $$[$0]); 
break;
case 5:
 log.info("sendDefineVariable call"); parseEvents.sendDefineVariable(yy, _$[$0], $$[$0]); 
break;
case 10:

         if (targetparser.isPatternList($$[$0-4]) && nonEmpty($$[$0-4]))
         {
            parseEvents.sendImplicitRule(yy, _$[$0-4], $$[$0-4], $$[$0-3], $$[$0-1], $$[$0], false);
         } 
         else if ($$[$0-2] !== null)
         {
            parseEvents.sendStaticPatternRule(yy, _$[$0-4], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0], false);
         }
         else
         {
            parseEvents.sendExplicitRule(yy, _$[$0-4], $$[$0-4], $$[$0-3], $$[$0-1], $$[$0], false);
         }
      
break;
case 11: case 13: case 15: case 17: case 18:
 this.$ = $$[$0]; 
break;
case 12: case 14: case 16:
 this.$ = null;
break;
case 19:

      this.$ = { kind: 'simple', name: $$[$0-1], value: $$[$0] }
   
break;
case 20:

      this.$ = { kind: 'recursive', name: $$[$0-1], value: $$[$0] }
   
break;
case 21:

      this.$ = { kind: 'append', name: $$[$0-1], value: $$[$0] }
   
break;
case 22:

      this.$ = { kind: 'conditional', name: $$[$0-1], value: $$[$0] }
   
break;
case 23:

      this.$ = { kind: 'shell', name: $$[$0-1], value: $$[$0] }
   
break;
case 24:

      this.$ = { kind: 'simple', name: $$[$0-2], value: $$[$0-1].join(os.EOL) }
      //console.log("parser assign " + JSON.stringify(this.$, null, 3));
   
break;
case 25:

      this.$ = { kind: 'recursive', name: $$[$0-2], value: $$[$0-1].join(os.EOL) }
      //console.log("parser assign " + JSON.stringify(this.$, null, 3));
   
break;
case 26:

      this.$ = { kind: 'append', name: $$[$0-2], value: $$[$0-1].join(os.EOL) }
      //console.log("parser assign " + JSON.stringify(this.$, null, 3));
   
break;
case 27:

      this.$ = { kind: 'conditional', name: $$[$0-2], value: $$[$0-1].join(os.EOL) }
      //console.log("parser assign " + JSON.stringify(this.$, null, 3));
   
break;
case 28:

      this.$ = { kind: 'shell', name: $$[$0-2], value: $$[$0-1].join(os.EOL) }
      //console.log("parser assign " + JSON.stringify(this.$, null, 3));
   
break;
case 29:

      $$[$0-1].push($$[$0].replace(/\r?\n$/, ""));
      this.$ = $$[$0-1];
   
break;
case 30:
 
      this.$ = []; 
   
break;
case 32:
 this.$ = []; 
break;
case 33:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 34:
 this.$ = [$$[$0]] 
break;
case 37:

      this.$ = 123;
      //console.error("REGISTERING");
      yy.preprocessor = { expandVariables: function (s) { console.error("REPLACING"); return "value_of_" + s; }}
   
break;
case 38:

	     console.error("RULELINE (" + JSON.stringify(yytext) + ")");
	  
break;
case 39:

	     console.error("RULE_START (" + JSON.stringify(yytext) + ")");
	  
break;
case 40:

	     console.error("EXPLICIT_RULE (" + JSON.stringify(yytext) + ")");
	  
break;
case 41:

	     console.error("IMPLICIT_RULE (" + JSON.stringify(yytext) + ")");
	  
break;
case 42:

	     console.error("TARGETPATTERNS (" + JSON.stringify(yytext) + ")");
     
break;
case 43:

	     console.error("PREREQUISITES (" + JSON.stringify(yytext) + ")");
	  
break;
case 44:

	     console.error("PREREQPATTERNS (" + JSON.stringify(yytext) + ")");
	  
break;
case 45:

	     console.error("ORDERONLIES (" + JSON.stringify(yytext) + ")");
	  
break;
case 46:

	     console.error("RECIPE_LINE (" + JSON.stringify(yytext) + ")");
	  
break;
case 47:

	     console.error("INLINE_RECIPE (" + JSON.stringify(yytext) + ")");
	  
break;
case 48:

	     console.error("INCLUDE (" + JSON.stringify(yytext) + ")");
	  
break;
case 49:

	     console.error("VARSTART (" + JSON.stringify(yytext) + ")");
	  
break;
case 50:

	     console.error("PIPE (" + JSON.stringify(yytext) + ")");
	  
break;
case 51:

	     console.error("COLON (" + JSON.stringify(yytext) + ")");
	  
break;
case 52:

	     console.error("TARGETS (" + JSON.stringify(yytext) + ")");
	  
break;
case 53:

	     console.error("PIPE_TARGETS (" + JSON.stringify(yytext) + ")");
	  
break;
case 54:

	     console.error("COLON_TARGETS (" + JSON.stringify(yytext) + ")");
	  
break;
case 55:

	     console.error("EOL (" + JSON.stringify(yytext) + ")");
	  
break;
case 56:

	     console.error("SPC (" + JSON.stringify(yytext) + ")");
	  
break;
case 57:

	     console.error("VARIABLE_SET_SIMPLE (" + JSON.stringify(yytext) + ")");
	  
break;
case 58:

	     console.error("VARIABLE_SET_RECURSIVE (" + JSON.stringify(yytext) + ")");
	  
break;
case 59:

	     console.error("VARIABLE_SET_APPEND (" + JSON.stringify(yytext) + ")");
	  
break;
case 60:

	     console.error("VARIABLE_SET_CONDITIONAL (" + JSON.stringify(yytext) + ")");
	  
break;
case 61:

	     console.error("VARIABLE_SET_SHELL (" + JSON.stringify(yytext) + ")");
	  
break;
case 62:

	     console.error("VARIABLE_VALUE (" + JSON.stringify(yytext) + ")");
	  
break;
case 63:

	     console.error("MACRO_SIMPLE (" + JSON.stringify(yytext) + ")");
	  
break;
case 64:

	     console.error("MACRO_RECURSIVE (" + JSON.stringify(yytext) + ")");
	  
break;
case 65:

	     console.error("MACRO_APPEND (" + JSON.stringify(yytext) + ")");
	  
break;
case 66:

	     console.error("MACRO_CONDITIONAL (" + JSON.stringify(yytext) + ")");
	  
break;
case 67:

	     console.error("MACRO_SHELL (" + JSON.stringify(yytext) + ")");
	  
break;
case 68:

	     console.error("MACRO_VALUE (" + JSON.stringify(yytext) + ")");
	  
break;
case 69:

	     console.error("MACRO_END (" + JSON.stringify(yytext) + ")");
	  
break;
case 70:

	     console.error("EOF2: " + JSON.stringify(JSON.stringify(yytext)) + ", state: " + yy.lexer.topState());
	  
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,10:7,11:8,20:10,21:11,8:$V2,9:$V3,13:$V4,22:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve}),{1:[3]},{5:[1,22],12:[1,23]},o($V0,[2,8]),o($V0,[2,2]),o($V0,[2,3]),o($V0,[2,4]),o($V0,[2,5]),o($V0,[2,6]),{14:[1,24]},o($V0,[2,17]),o($V0,[2,18]),{23:[1,25]},{23:[1,26]},{23:[1,27]},{23:[1,28]},{23:[1,29]},o($Vf,$Vg,{29:30}),o($Vf,$Vg,{29:31}),o($Vf,$Vg,{29:32}),o($Vf,$Vg,{29:33}),o($Vf,$Vg,{29:34}),{1:[2,1]},o($V0,$V1,{7:4,10:7,11:8,20:10,21:11,6:35,8:$V2,9:$V3,13:$V4,22:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve}),o($Vh,[2,12],{15:36,14:[1,37]}),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),{30:[1,38],35:$Vi},{30:[1,40],35:$Vi},{30:[1,41],35:$Vi},{30:[1,42],35:$Vi},{30:[1,43],35:$Vi},o($V0,[2,7]),o($Vj,[2,14],{16:44,18:[1,45]}),o($Vh,[2,11]),o($V0,[2,24]),o($Vf,[2,29]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,16],{17:46,19:[1,47]}),o($Vj,[2,13]),o($V0,[2,10]),o($V0,[2,15])],
defaultActions: {22:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const os = require("os");
const parseEvents = require("./makefile-syntax-events");
const log = require("../../../makelog");
const errors = require("../../../make-errors");
const targetparser = require("../result-builder/targets");
function nonEmpty(src)
{
   if (!src)
      return false;
   
   return src.trim().length > 0;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"multiline":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
const preprocessor = require("./makefile-preprocessor");
const tokens = require("./makefile-syntax-tokens");
const context = require("./parser-context");
const utils = require("./makefile-syntax-utils");
const log = require("../../../makelog");
const errors = require("../../../make-errors");

/*const debugStates = true;

this.begin = 
    function(state) 
    {
        var pre = this.topState(); 
        if (debugStates)
            console.error("...begin(): " + pre + " => " + state); 

        // from this.begin("INITIAL"):
        {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
                return this.conditionStack.pop();
            }
            else{
                console.error("ooops..");
            }
        }

        // from this.pushState(state):
        {
            this.conditionStack.push(state);
        }
    };

initDebugDone: true;
this.initDebug = function initDebug() {
    if (!!this.initDebugDone)
        return;

    this.initDebugDone = true;
    
    this.popState = 
        function() 
        {
            var pre = this.topState(); 

            if (this.conditionStack.length > 1)
            {
                this.conditionStack.pop(); 
            } 
            else 
            {
                console.error("WARNING: you tried to popState() beyond the state stack. The operation is being ignored, so no harm done - but we though you should know");
            }

            var post = this.topState(); 
            if (debugStates)
                console.error("...popState()):  " + pre + " => " + post); 
        };
    
    this.pushState = 
        function(s) 
        {
            var pre = this.topState(); 
            if (debugStates)
                console.error("...pushState(): " + pre + " => " + s); 

            this.conditionStack.push(s); 
        };

}

const goto = function (state)
{
     yy_.begin(state);
}
*/
const match = function (index)
{
    yy_.yytext = yy_.matches[index];
}


const resolveVariables = function (src)
{
    return context.getContext(yy).resultBuilder.expandVariables(src);
}

const trimStart = function (prefix)
{
    yy_.yytext = yy_.yytext.replace(prefix, "");
}

const trimColon = function ()
{
    trimStart(/^[ \t:]*/);
}

const trimPipe = function ()
{
    trimStart(/^[ \t|]*/);
}

const trimSemi = function ()
{
    trimStart(/^[ \t;]*/);
}

const isRecipe = function (line)
{
    var res =  line.startsWith("\t");
    //console.error("Line '" + line + "' " + (res ? "IS" : "is NOT") + " a recipe line");
    return res;
}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("INITIAL"); return tokens.EOL; 
break;
case 1: this.begin("INITIAL"); return tokens.EOF2; 
break;
case 2: 
        //console.error("pre");
        //console.error("   yy_.yytext: " + JSON.stringify(yy_.yytext));
        //console.error("   _input: " + JSON.stringify(this._input));
        this.begin("PARSER"); 
    
break;
case 3: 
        //this.unput(/*resolveVariables*/(yy_.yytext)); 
    
break;
case 4: this.begin("INITIAL"); return tokens.EOL; 
break;
case 5: this.begin("INCLUDE"); 
break;
case 6: this.begin("VAR_DEF"); 
break;
case 7: this.begin("VAR_DEF"); 
break;
case 8: this.begin("VAR_DEF"); 
break;
case 9: this.begin("VAR_DEF"); 
break;
case 10: this.begin("VAR_DEF"); 
break;
case 11: this.begin("VAR_DEF"); 
break;
case 12: this.begin("MACRO"); 
break;
case 13: this.begin("PARSER_RECIPELINE"); 
break;
case 14:
            // Expand any variable references before parsing:
            let preprocessedLine = resolveVariables(yy_.yytext);
            this.unput(preprocessedLine); 
            this.begin("RULE_START");
    
break;
case 15:
        this.begin("RULE");
        return tokens.TARGETS;
    
break;
case 16:
        trimColon();
        return tokens.COLON_TARGETS;
    
break;
case 17:
        trimPipe();
        return tokens.PIPE_TARGETS;
    
break;
case 18:
        trimSemi(); 
        return tokens.INLINE_RECIPE; 
    
break;
case 19:
        this.begin("INITIAL"); 
        return tokens.EOL; 
    
break;
case 20:
        console.error("PARSER_RULE_EXPLICIT"); 
        this.begin("PREREQUISITES"); 
        trimColon(); 
        return tokens.EXPLICIT_RULE; 
    
break;
case 21: 
        console.error("PARSER_RULE_IMPLICIT"); 
        this.begin("PREREQUISITES"); 
        trimColon(); 
        return tokens.IMPLICIT_RULE; 
    
break;
case 22: 
        console.error("PREREQUISITES"); 
        this.begin("ORDERONLIES"); 
        return tokens.PREREQUISITES; 
    
break;
case 23:
        console.error("ORDERONLIES"); 
        this.begin("INLINE_RECIPE"); 
        trimPipe(); 
        return tokens.ORDERONLIES; 
    
break;
case 24:
        console.error("INLINE_RECIPE"); 
        this.begin("ENDRULE"); 
        trimSemi(); 
        return tokens.INLINE_RECIPE; 
    
break;
case 25:
        console.error("ENDRULE"); 
        this.begin("INITIAL"); return tokens.EOL; 
    
break;
case 26: this.begin("PREREQPATTERNS"); trimColon(); return tokens.TARGETPATTERNS; 
break;
case 27: this.begin("ORDERONLIES"); trimColon(); return tokens.PREREQPATTERNS; 
break;
case 28: yy_.yytext = yy_.yytext.substr(1);  return tokens.RECIPE_LINE; 
break;
case 29: this.begin("INITIAL"); this.begin("INITIAL"); return tokens.EOL; 
break;
case 30: return tokens.EOF2; 
break;
case 31: this.begin("INCLUDE_NAME"); 
break;
case 32: return tokens.INCLUDE; 
break;
case 33: return tokens.INCLUDE; 
break;
case 34: return tokens.INCLUDE; 
break;
case 35: this.begin("INITIAL"); return tokens.EOL; 
break;
case 36: this.begin("VAR_VALUE");   yy_.yytext = utils.trimVarname(yy_.yytext);  return tokens.VARIABLE_SET_CONDITIONAL; 
break;
case 37: this.begin("VAR_VALUE");   yy_.yytext = utils.trimVarname(yy_.yytext);  return tokens.VARIABLE_SET_SIMPLE; 
break;
case 38: this.begin("VAR_VALUE");   yy_.yytext = utils.trimVarname(yy_.yytext);  return tokens.VARIABLE_SET_SIMPLE; 
break;
case 39: this.begin("VAR_VALUE");   yy_.yytext = utils.trimVarname(yy_.yytext);  return tokens.VARIABLE_SET_APPEND; 
break;
case 40: this.begin("VAR_VALUE");   yy_.yytext = utils.trimVarname(yy_.yytext);  return tokens.VARIABLE_SET_SHELL; 
break;
case 41: this.begin("VAR_VALUE");   yy_.yytext = utils.trimVarname(yy_.yytext);  return tokens.VARIABLE_SET_RECURSIVE; 
break;
case 42: this.begin("VAR_DEF_END"); yy_.yytext = utils.trimVarvalue(yy_.yytext); return tokens.VARIABLE_VALUE; 
break;
case 43: this.begin("INITIAL");                                              return tokens.EOL; 
break;
case 44: match(4); this.begin("MACRO_VALUE"); return tokens.MACRO_RECURSIVE; 
break;
case 45: match(4); this.begin("MACRO_VALUE"); return tokens.MACRO_CONDITIONAL; 
break;
case 46: match(4); this.begin("MACRO_VALUE"); return tokens.MACRO_SIMPLE; 
break;
case 47: match(4); this.begin("MACRO_VALUE"); return tokens.MACRO_SIMPLE; 
break;
case 48: match(4); this.begin("MACRO_VALUE"); return tokens.MACRO_APPEND; 
break;
case 49: match(4); this.begin("MACRO_VALUE"); return tokens.MACRO_SHELL; 
break;
case 50: match(4); this.begin("MACRO_VALUE"); return tokens.MACRO_RECURSIVE; 
break;
case 51:           this.begin("INITIAL");     return tokens.MACRO_END; 
break;
case 52:                                return tokens.MACRO_VALUE; 
break;
case 53: return tokens.EOF2; 
break;
case 54: return tokens.EOF2; 
break;
case 55: return tokens.EOF2; 
break;
case 56: return tokens.EOF2; 
break;
case 57: return tokens.EOF2; 
break;
case 58: return tokens.EOF2; 
break;
case 59: return tokens.EOF2; 
break;
case 60: console.error("MISMATCH: '" + yy_.yytext + "', state: " + this.topState()); 
        console.error("   yy_.yytext: " + JSON.stringify(yy_.yytext));
        console.error("   _input: " + JSON.stringify(this._input));

break;
}
},
rules: [/^(?:^([ \t]*)((?:[\r]?[\n])))/,/^(?:^([ \t]*)$)/,/^(?:^)/,/^(?:.*)/,/^(?:^((?:[\r]?[\n])))/,/^(?:^(?=include))/,/^(?:^(?=((?:[^\s=:?+!])+)([ \t]*)?::=))/,/^(?:^(?=((?:[^\s=:?+!])+)([ \t]*)?:=))/,/^(?:^(?=((?:[^\s=:?+!])+)([ \t]*)?\+=))/,/^(?:^(?=((?:[^\s=:?+!])+)([ \t]*)?\?=))/,/^(?:^(?=((?:[^\s=:?+!])+)([ \t]*)?!=))/,/^(?:^(?=((?:[^\s=:?+!])+)([ \t]*)?=))/,/^(?:^(?=define([ \t]*)))/,/^(?:^(?=[\t]([^\r\n]*(?=((?:[\r]?[\n]))))))/,/^(?:^(?:([^\r\n]*(?=((?:[\r]?[\n]))))))/,/^(?:((?:(?:([ \t]*)((?:(((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))|((?:((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*))[%]((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))))))+([ \t]*))))/,/^(?:[:]((?:(?:([ \t]*)((?:(((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))|((?:((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*))[%]((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))))))+([ \t]*))))/,/^(?:[|]((?:(?:([ \t]*)((?:(((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))|((?:((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*))[%]((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))))))+([ \t]*))))/,/^(?:[;]([^\r\n]*(?=((?:[\r]?[\n])))))/,/^(?:((?:[\r]?[\n])))/,/^(?:((?:(?:([ \t]*)(((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*))))+([ \t]*)))((?:([ \t]*)[:]([ \t]*))))/,/^(?:((?:(?:([ \t]*)((?:((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*))[%]((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))))+([ \t]*)))((?:([ \t]*)[:]([ \t]*))))/,/^(?:((?:(?:([ \t]*)((?:(((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))|((?:((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*))[%]((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))))))+([ \t]*)))?)/,/^(?:(?:((?:([ \t]*)[|]([ \t]*)))((?:(?:([ \t]*)((?:(((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))|((?:((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*))[%]((?:(?:(?:\\[%:;# \t\\|])|[^%:;# \t\\|\r\n\x00])*)))))))+([ \t]*))))?)/,/^(?:(?:((?:([ \t]*)[;]([ \t]*)))([^\r\n]*(?=((?:[\r]?[\n])))))?)/,/^(?:((?:[\r]?[\n])))/,/^(?:((?:([ \t]*)[:]([ \t]*)))((?:[^:;#\r\n=\x00]|(?:\\[%:;# ]))+))/,/^(?:(?:((?:([ \t]*)[:]([ \t]*)))((?:[^|#=:\r\n\x00]|(?:\\[%|# ]))*))?)/,/^(?:^[\t]([^\r\n]*(?=((?:[\r]?[\n])))))/,/^(?:((?:[\r]?[\n])))/,/^(?:$)/,/^(?:^include([ \t]*))/,/^(?:((?:((?:([\/\\])*(?:((?:(?:([^\r\n\s:#|:\\])|((?:\\[\x20:\t|\\])))+))([\/\\])+)*))?((?:(?:([^\r\n\s:#|:\\])|((?:\\[\x20:\t|\\])))+)))))/,/^(?:'((?:((?:([\/\\])*(?:((?:(?:([^\r\n\s:#|:\\])|((?:\\[\x20:\t|\\])))+))([\/\\])+)*))?((?:(?:([^\r\n\s:#|:\\])|((?:\\[\x20:\t|\\])))+))))')/,/^(?:"((?:((?:([\/\\])*(?:((?:(?:([^\r\n\s:#|:\\])|((?:\\[\x20:\t|\\])))+))([\/\\])+)*))?((?:(?:([^\r\n\s:#|:\\])|((?:\\[\x20:\t|\\])))+))))")/,/^(?:([ \t]*)?((?:[\r]?[\n])))/,/^(?:^((?:[^\s=:?+!])+)\s*[?][=])/,/^(?:^((?:[^\s=:?+!])+)\s*[:][:][=])/,/^(?:^((?:[^\s=:?+!])+)\s*[:][=])/,/^(?:^((?:[^\s=:?+!])+)\s*[+][=])/,/^(?:^((?:[^\s=:?+!])+)\s*[!][=])/,/^(?:^((?:[^\s=:?+!])+)\s*[=])/,/^(?:[^\r\n]*(?=((?:[\r]?[\n]))))/,/^(?:((?:[\r]?[\n])))/,/^(?:(^(define([ \t]*)((?:[^\s=:?+!])+)([ \t]*)?))=(([ \t]*((?:[\r]?[\n])))))/,/^(?:(^(define([ \t]*)((?:[^\s=:?+!])+)([ \t]*)?))\?=(([ \t]*((?:[\r]?[\n])))))/,/^(?:(^(define([ \t]*)((?:[^\s=:?+!])+)([ \t]*)?)):=(([ \t]*((?:[\r]?[\n])))))/,/^(?:(^(define([ \t]*)((?:[^\s=:?+!])+)([ \t]*)?))::=(([ \t]*((?:[\r]?[\n])))))/,/^(?:(^(define([ \t]*)((?:[^\s=:?+!])+)([ \t]*)?))\+=(([ \t]*((?:[\r]?[\n])))))/,/^(?:(^(define([ \t]*)((?:[^\s=:?+!])+)([ \t]*)?))!=(([ \t]*((?:[\r]?[\n])))))/,/^(?:^(^(define([ \t]*)((?:[^\s=:?+!])+)([ \t]*)?))(([ \t]*((?:[\r]?[\n])))))/,/^(?:^endef\s*(?=((?:[\r]?[\n]))))/,/^(?:[^\r\n]*((?:[\r]?[\n])))/,/^(?:$)/,/^(?:$)/,/^(?:$)/,/^(?:$)/,/^(?:$)/,/^(?:$)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,53,55,60],"inclusive":true},"RULE":{"rules":[16,17,18,19,55,60],"inclusive":true},"RULE_START":{"rules":[15,55,60],"inclusive":true},"PARSER_RULE_EXPLICIT":{"rules":[20,55,60],"inclusive":true},"PARSER_RULE_IMPLICIT":{"rules":[21,55,60],"inclusive":true},"PARSER_RULE_STATICPATTERN":{"rules":[55,60],"inclusive":true},"PREPROCESSOR":{"rules":[3,55,60],"inclusive":true},"PREPROCESSOR_LINEBREAKS":{"rules":[55,60],"inclusive":true},"PREPROCESSOR_COMMENTS":{"rules":[55,60],"inclusive":true},"PREPROCESSOR_VARIABLES":{"rules":[55,60],"inclusive":true},"PARSER":{"rules":[4,5,6,7,8,9,10,11,12,13,14,54,55,60],"inclusive":true},"PARSER_RULELINE":{"rules":[55,56,60],"inclusive":true},"PARSER_RULELINE_TARGETS":{"rules":[55,60],"inclusive":true},"RULETYPE":{"rules":[55,60],"inclusive":true},"TARGETPATTERNS":{"rules":[26,55,60],"inclusive":true},"PREREQUISITES":{"rules":[22,55,60],"inclusive":true},"PREREQPATTERNS":{"rules":[27,55,60],"inclusive":true},"ORDERONLIES":{"rules":[23,55,60],"inclusive":true},"PARSER_RECIPELINE":{"rules":[28,29,30,55,57,60],"inclusive":true},"ENDRULE":{"rules":[25,55,60],"inclusive":true},"INLINE_RECIPE":{"rules":[24,55,60],"inclusive":true},"INCLUDE":{"rules":[31,55,60],"inclusive":true},"COMMENT":{"rules":[55,60],"inclusive":true},"VAR_DEF":{"rules":[36,37,38,39,40,41,55,59,60],"inclusive":true},"VAR_VALUE":{"rules":[42,55,60],"inclusive":true},"VAR_DEF_END":{"rules":[43,55,60],"inclusive":true},"MACRO":{"rules":[44,45,46,47,48,49,50,55,58,60],"inclusive":true},"MACRO_VALUE":{"rules":[51,52,55,60],"inclusive":true},"INCLUDE_NAME":{"rules":[32,33,34,35,55,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = makefileSyntax;
exports.Parser = makefileSyntax.Parser;
exports.parse = function () { return makefileSyntax.parse.apply(makefileSyntax, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}